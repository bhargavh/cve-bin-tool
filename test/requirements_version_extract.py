# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

""" Scan for CVE's in cve-bin-tool's pip requirements (main tool + docs)"""

import csv
import os
import pkg_resources

CACHEDIR = os.path.join(os.path.expanduser("~"), ".cache", "cve-bin-tool")
ROOTPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
DOCPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "doc"))

REQUIREMENTS_CSV = os.path.join(ROOTPATH, "requirements_vendor_product.csv")
DOC_REQUIREMENTS_CSV = os.path.join(DOCPATH, "requirements_vendor_product.csv")

"""Helper function that returns product_vendor_version pair list from a product_vendor_csv requirements file. """


def get_product_vendor_version(filename):
    product_vendor_version = []
    with open(filename, "r") as file:
        reader = csv.reader(file)
        next(reader)
        for vendor, product in reader:
            product_vendor_version.append(
                (product, vendor, pkg_resources.get_distribution(product).version)
            )
    return product_vendor_version


output = set(
    get_product_vendor_version(REQUIREMENTS_CSV)
    + get_product_vendor_version(DOC_REQUIREMENTS_CSV)
)

# Write the output to a requirements.csv so later we can run cve-bin-tool on the csv file.
with open(os.path.join(CACHEDIR, "requirements.csv"), mode="w") as csv_file:
    fieldnames = ["vendor", "product", "version"]
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()
    for row in output:
        writer.writerow({"vendor": row[0], "product": row[1], "version": row[2]})
